{
  "workflow_status": "SUCCESS",
  "execution_time": 12.097788572311401,
  "data_processing": {
    "file_path": "/mnt/optimizer_share/input/Python_Multi_Consolidated_20250726_161921.csv",
    "file_size_mb": 5.169459342956543,
    "total_rows": 79,
    "total_strategies": 10764,
    "data_loading_time": 7.467917442321777,
    "data_processing_time": 1.3146686553955078,
    "total_data_time": 8.784215688705444,
    "bottleneck_analysis": "Data loading is the main bottleneck, not algorithms"
  },
  "optimization_results": {
    "execution_timestamp": "2025-07-26T16:32:54.596087",
    "total_execution_time": 0.21371746063232422,
    "algorithms_executed": 7,
    "algorithms_failed": 0,
    "success_rate": 100.0,
    "best_algorithm": "simulated_annealing",
    "best_fitness": 0.3281326794697061,
    "best_portfolio": [
      9147,
      10232,
      1928,
      9771,
      4965,
      8309,
      6813,
      8940,
      4616,
      8992,
      7328,
      5388,
      8865,
      7461,
      3112,
      6909,
      1017,
      10503,
      4185,
      1578,
      6149,
      7325,
      2222,
      6422,
      445,
      1026,
      4853,
      1689,
      9825,
      10519,
      3897,
      7538,
      2915,
      10651,
      7224
    ],
    "individual_results": {
      "genetic_algorithm": {
        "best_fitness": 0.22650527897537234,
        "best_portfolio": [
          1651,
          6980,
          4042,
          7860,
          5815,
          4800,
          3092,
          866,
          7705,
          2028,
          7298,
          7766,
          4890,
          10079,
          9105,
          6136,
          6611,
          6297,
          9508,
          2323,
          5918,
          7500,
          8716,
          10526,
          2577,
          3623,
          6125,
          1009,
          10266,
          2925,
          3515,
          649,
          9743,
          10746,
          44
        ],
        "generations": 100,
        "execution_time": 0.02331066131591797,
        "status": "success"
      },
      "particle_swarm_optimization": {
        "best_fitness": 0.19648412770653872,
        "best_portfolio": [
          8690,
          2204,
          2162,
          1168,
          8602,
          2614,
          7423,
          7272,
          5629,
          2102,
          2970,
          10128,
          5100,
          6177,
          7406,
          6314,
          4759,
          480,
          9828,
          4507,
          7842,
          10469,
          5026,
          6596,
          7710,
          7373,
          4405,
          4705,
          374,
          2449,
          1715,
          3163,
          5628,
          1687,
          9528
        ],
        "iterations": 75,
        "execution_time": 0.016840457916259766,
        "status": "success"
      },
      "simulated_annealing": {
        "best_fitness": 0.3281326794697061,
        "best_portfolio": [
          9147,
          10232,
          1928,
          9771,
          4965,
          8309,
          6813,
          8940,
          4616,
          8992,
          7328,
          5388,
          8865,
          7461,
          3112,
          6909,
          1017,
          10503,
          4185,
          1578,
          6149,
          7325,
          2222,
          6422,
          445,
          1026,
          4853,
          1689,
          9825,
          10519,
          3897,
          7538,
          2915,
          10651,
          7224
        ],
        "iterations": 150,
        "execution_time": 0.013369083404541016,
        "status": "success"
      },
      "differential_evolution": {
        "best_fitness": 0.20385252218902508,
        "best_portfolio": [
          2583,
          5704,
          7767,
          4147,
          6180,
          5634,
          6336,
          2751,
          9354,
          426,
          8572,
          8845,
          2715,
          464,
          5401,
          2035,
          5608,
          620,
          1959,
          5106,
          9444,
          7439,
          2899,
          9104,
          8101,
          4950,
          2938,
          10250,
          6084,
          7930,
          8356,
          4052,
          10157,
          9177,
          7616
        ],
        "generations": 80,
        "execution_time": 0.018720149993896484,
        "status": "success"
      },
      "ant_colony_optimization": {
        "best_fitness": 0.2062911949508703,
        "best_portfolio": [
          3935,
          10161,
          10247,
          10196,
          2834,
          4982,
          2730,
          9642,
          8978,
          3465,
          7116,
          8269,
          4053,
          9084,
          4451,
          3878,
          2789,
          4243,
          2168,
          10326,
          8306,
          6834,
          4279,
          3185,
          6399,
          1857,
          1317,
          2050,
          1432,
          9801,
          1664,
          7479,
          8189,
          8756,
          10149
        ],
        "iterations": 60,
        "execution_time": 0.014087677001953125,
        "status": "success"
      },
      "bayesian_optimization": {
        "best_fitness": 0.20592251660041277,
        "best_portfolio": [
          2503,
          8883,
          9792,
          10753,
          9237,
          4229,
          7378,
          10004,
          2833,
          65,
          4061,
          845,
          4173,
          8898,
          5534,
          6933,
          2699,
          3910,
          2281,
          4630,
          10512,
          6851,
          10480,
          6414,
          7165,
          3149,
          681,
          8092,
          9303,
          7768,
          7102,
          8994,
          10463,
          4757,
          4870
        ],
        "iterations": 40,
        "execution_time": 0.009735107421875,
        "status": "success"
      },
      "random_search": {
        "best_fitness": 0.2479134569387074,
        "best_portfolio": [
          8836,
          2554,
          4870,
          5061,
          2687,
          241,
          9903,
          2573,
          10245,
          5100,
          1642,
          10747,
          10104,
          6770,
          9839,
          1228,
          508,
          9263,
          3268,
          3991,
          8674,
          5060,
          10174,
          9161,
          3145,
          5903,
          5028,
          8825,
          8092,
          4572,
          3255,
          4317,
          4967,
          10083,
          7438
        ],
        "iterations": 500,
        "execution_time": 0.1170961856842041,
        "status": "success"
      }
    },
    "execution_method": "sequential",
    "performance_note": "Sequential execution chosen for optimal performance with fast algorithms"
  },
  "output_files": {
    "equity_curves": "/mnt/optimizer_share/output/equity_curves_20250726_163254.png",
    "performance_report": "/mnt/optimizer_share/output/performance_report_20250726_163254.txt",
    "portfolio_composition": "/mnt/optimizer_share/output/portfolio_composition_20250726_163254.csv",
    "algorithm_comparison": "/mnt/optimizer_share/output/algorithm_comparison_20250726_163254.png",
    "excel_summary": "/mnt/optimizer_share/output/optimization_summary_20250726_163254.xlsx",
    "execution_summary": "/mnt/optimizer_share/output/execution_summary_20250726_163254.json"
  },
  "performance_metrics": {
    "data_processing_time": 8.784215688705444,
    "algorithm_execution_time": 0.21371746063232422,
    "data_vs_algorithm_ratio": 41.10200290942842,
    "main_bottleneck": "Data processing",
    "optimization_opportunity": "Focus on data loading optimization for best performance gains",
    "algorithm_performance": "Already very fast (milliseconds per algorithm)",
    "real_value": "Algorithm variety and comprehensive output generation"
  },
  "honest_assessment": {
    "primary_benefits": [
      "7 different optimization algorithms",
      "Automated best result selection",
      "Professional output generation (6 file types)",
      "Complete workflow automation",
      "A100 GPU acceleration for individual algorithms"
    ],
    "performance_reality": "Sequential execution is faster than parallel for these tasks",
    "main_bottleneck": "Data loading and processing (not algorithm execution)",
    "real_value_proposition": "Comprehensive optimization suite with professional outputs"
  }
}